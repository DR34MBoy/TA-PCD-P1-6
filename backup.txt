directory_path = r'images_new'

# for i in os.listdir(directory_path):
#     if i.split('_')[0] == 'Parasitized':
#         label.append("Parasitized")
#     elif i.split('_')[0] == 'Uninfected':
#         label.append("Uninfected")

# for i in os.listdir(directory_path):
#     f = cv2.imread(os.path.join(directory_path, i), cv2.COLOR_BGR2GRAY)
#     resized_f = cv2.resize(f, (100, 100))
#     features.append(resized_f)


# Model evaluation
train_accuracy = rf.score(x_train, y_train)
test_accuracy = rf.score(x_test, y_test)
print("Train accuracy:", train_accuracy)
print("Test accuracy:", test_accuracy)

# Predict on test set
y_pred = rf.predict(x_test)
test_accuracy = accuracy_score(y_pred, y_test)
print("Test accuracy (using accuracy_score):", test_accuracy)

import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
import sklearn
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns


### TRAINING ###
# Array untuk features dan label
features = []
label = []

# Folder gambar
image_folder_path = "./images_folder"

# Cek jumlah isi konten folder
print(len(os.listdir(image_folder_path)))

# Baca folder "./images_folder/Parasitized"
parasitized_dir = os.path.join(image_folder_path, 'Parasitized')
for image_file in os.listdir(parasitized_dir):
    if image_file.endswith('.png'):
        image = cv2.imread(os.path.join(parasitized_dir, image_file))
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Ubah ke format warna RGB
        image = cv2.resize(image, (100, 100))
        features.append(image)
        label.append('Parasitized')

# Baca folder "./images_folder/Uninfected"
uninfected_dir = os.path.join(image_folder_path, 'Uninfected')
for image_file in os.listdir(uninfected_dir):
    if image_file.endswith('.png'):
        image = cv2.imread(os.path.join(uninfected_dir, image_file))
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Ubah ke format warna RGB
        image = cv2.resize(image, (100, 100))
        features.append(image)
        label.append('Uninfected')

# Buat jadi Array
X = np.array(features)
Y = np.array(label)
X = X.reshape(len(features), -1)

# Split Dataset
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.1, random_state=42)

# Ubah dimensi data menjadi 1D (flatten)
x_train = x_train.reshape(x_train.shape[0], -1)
x_test = x_test.reshape(x_test.shape[0], -1)

# Normalisasi nilai piksel menjadi range 0-1
x_train = x_train / 255.0
x_test = x_test / 255.0


### Random Forest Classifier tanpa tuning ###

# rf = RandomForestClassifier() 
# rf.fit(x_train, y_train)

# y_pred_train = rf.predict(x_train)
# y_pred_test = rf.predict(x_test)

# cm = confusion_matrix(y_test, y_pred_test)
# plt.figure(figsize=(10, 8))
# sns.heatmap(cm, annot=True, cmap='Blues', fmt='g', xticklabels=['Parasitized', 'Uninfected'], yticklabels=['Parasitized', 'Uninfected'])
# plt.xlabel('Predicted')
# plt.ylabel('Actual')
# plt.title('Confusion Matrix')
# plt.show()

#     # training metrics
# print("Training metrics:")
# print(sklearn.metrics.classification_report(y_true= y_train, y_pred= y_pred_train))
    
#     # test data metrics
# print("Test data metrics:")
# print(sklearn.metrics.classification_report(y_true= y_test, y_pred= y_pred_test))


### Random Forest Classifier dengan tuning ###
# parameters = {  'n_estimators':[50,60,70,80,90,100],
#                 'min_samples_leaf':[1,2,3,4],
#                 'max_depth':[10,20,30],
#                 'max_features':[10,20,30,40,50],
#                 'criterion':['gini','entropy']
#             }

# rf = RandomForestClassifier()
# rf = GridSearchCV(rf, param_grid=parameters, scoring='accuracy')

rf = RandomForestClassifier(n_estimators=100, criterion='gini' ,max_depth=30,  min_samples_leaf=2, max_features=30)
rf = rf.fit(x_train, y_train)

rf.fit(x_train, y_train)

# best_params = rf.best_params_
# print("Best Parameters:", best_params)

y_pred_train = rf.predict(x_train)
y_pred_test = rf.predict(x_test)

cm = confusion_matrix(y_test, y_pred_test)
plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, cmap='Blues', fmt='g', xticklabels=['Parasitized', 'Uninfected'], yticklabels=['Parasitized', 'Uninfected'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

    # training metrics
print("Training metrics:")
print(sklearn.metrics.classification_report(y_true= y_train, y_pred= y_pred_train))
    
    # test data metrics
print("Test data metrics:")
print(sklearn.metrics.classification_report(y_true= y_test, y_pred= y_pred_test))



### Fungsi untuk klasifikasi gambar ###
def test(img):
    resize_img = cv2.resize(img, (100, 100))
    array_image = np.array(resize_img)
    array_image = array_image.reshape(1, -1)

    print(rf.predict(array_image).reshape(1, -1))

    plt.imshow(array_image.reshape(100, 100, 3))    
    plt.show()

